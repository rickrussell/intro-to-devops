https://www.youtube.com/watch?v=o7-IuYS0iSE

Prior, there were high walls and each department threw their piece of the project over the wall to the next department.
Idea started in 2009

developers, operations, project managers, business people, product managers, qa testers, systems engineers, DBAs, network engineers, security

agile development with an iterative approach instead of long and detailed design phase, planning phase, long implementation phase

agile covers just the development phase of the sdlc

DevOps is the practice of Operations and Development engineers participating together in the entire service life cycle from design to development to production support.

Chef defines DevOps as a cultural and professional movement focused on how we build and operate high velocity organizations, born from the experiences of its practitioners.

If DevOps is a practice, how do you do it?

Culture, Automation, Measurement, Sharing

DevOps does not mean that operations is going away or that developers are taking over operations' responsibilities.
DevOps is not just a bunch of tools. Doing DevOps is about more than just using the tools.
DevOps is an organization change that is supported by a set of tools.

So, it's important for me to clarify that I am NOT talking about the whole DevOps culture, but AM focusing on the tools.
I need to start out be defining what I mean by DevOps.
I am focusing on the Automation and Measurement aspects.

Deployment
Monitoring
Scale software deployment

How do DevOps, Monitoring, Agile, Continuous Integration come into play in the Software Development Life Cycle

SDLC
Plan -> Code -> Test -> Release -> Deploy -> Operate

Agile development is iterative. Things evolve and people collaborate across departments and functions. Agile started in 2001. It covers Planning -> Coding -> Testing (unit, acceptance). It doesn't address Release process or Deploy -> Operate.

Automating Code and Unit test process is what Continuous Integration is about. This is designed to ensure that new features don't break other functionality.

Automating it all the way to the Release is covered by Continuous Delivery.

DevOps takes it all the way through Operation. It ties the testing into the Deployment process. It connects developer side automation with operation side automation.

Development, Packaging, Deployment, Monitoring Tools
Development - 
Packaging, Deployment - Vagrant
Monitoring - Jenkins

Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.
Jenkins - Continuous Integration Service. Watch for check-ins of new code, automatically run tests and package it up

Push changes to a team repository which automatically makes changes to the integration environment.

Monitoring system to see how things are performing. Infrastructure monitoring (service is unavailable, disk space is filling up, drive has crashed) has been an operational responsibility. But there are things that developers can suggest to monitor, such as whether useful data is being created or whether the new release runs faster or slower. Measure all the things! from development through customers using the product, including measuring our measuring tools (how meta!).

Deployment = setting up a server to run an application

Packer builds standard deployment images that will work in both production and development systems.

Devs tend to like change, new shiny things and exploring and learning.
Ops tend to like stability, predictability and consistency.
Product managers want to make the customers happy.
Security team want to protect against vulnerabilities.
Business management needs to watch the budget.

To maintain same environment on dev and prod you can:
Create a master image / use virtual machines (more work up front but then faster for new instances. if the image needs to change, it's also more work to deal with it.)
Install a base OS and use a configuration management tool that controls all the machines and keeps them the same. (more flexible and easier to get started, but booting up a machine takes longer.)

VirtualBox, Vagrant, Git, ssh, Packer
git clone http://github.com/udacity/devops-intro-project devops

Packer
template - builders, provisioners (shell scripts, chef and puppet scripts), post-processors create artifacts (for example a vagrant artifact)
the template can contain multiple builders. each builder generates its own artifact. this is how one packer template can create the appropriate image depending on where the image will be deployed.

Continuous Integration - an automated process of getting changes into existing codebases and building and running tests. This is triggered when a developer commits a change. The CI service "sees" that code has been committed and it spawns a build process, runs tests and reports results. It makes sure that the software builds and runs successfully.
Continuous Delivery - this is the process of automating the release pipeline down to the software release

Jenkins is a (self-hosted) CI tool, other (hosted) options are Travis CI and Circle CI
Graphite is a monitoring tool

Environments
Local (developers workstation)
Development
Integration
Staging
Production

Developer does work in local environment.
Commits change to (D)VCS

Maintain a code repository
Automate the build
Test the build
Commit your changes often
Build your commit
Fix bugs right away
Test in a clone environment

For the process to work, developers need to be good about commiting their code frequently.

Unit testing - done by developer to test individual things s/he has written
Regression testing - accumulated over time as bugs are found (and fixed)
Smoke testing - quick check that there is no obvious (fatal) flaw
System Integration testing - test the whole system not the the piece of code that was changed. see that the change plays nicely
Automated acceptance testing - scripts that mimic things a human would do when interacting with the application
Manual QA testing

Bug tracking system

Some parts of the process may require a manual trigger to initiate the next part of the automated process. Slack and HipChat are communications services that can be integrated with CI tools so that the trigger can be executed without having to sign in to a computer.

There is far too much information for a human being to be able to do all the necessary monitoring manually. Fortunately, there are tools to help with the monitoring.

Some monitoring tools: Nagios, Zabbix, Graphite, InfluxDB, StatsD, Grafana, PagerDuty, Logstash
